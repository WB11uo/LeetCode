class Solution {
    public int[][] allCellsDistOrder(int R, int C, int r0, int c0) {
        int[][] list = new int[R * C][];
        for (int i = 0; i < R; i++) {
            for (int j = 0; j < C; j++) {
                list[i * C + j] = new int[] {i, j};
            }
        }
        Arrays.sort(list, new Comparator<int[]>() {
            public int compare(int[] a, int[] b) {
                return (Math.abs(a[0] - r0) + Math.abs(a[1] - c0)) - (Math.abs(b[0] - r0) + Math.abs(b[1] - c0));
            }
        });
        return list;
    }
}
//////////////////////////////////////////////////
//桶排序
class Solution {
    public int[][] allCellsDistOrder(int R, int C, int r0, int c0) {
		int maxDist = Math.max(r0, R - 1 - r0) + Math.max(c0, C - 1 - c0);
		List<List<int[]>> bucket = new ArrayList<List<int[]>>();
		for (int i = 0; i <= maxDist; i++) {
			bucket.add(new ArrayList<int[]>());
		}
		
		for (int i = 0; i < R; i++) {
			for (int j = 0; j < C; j++) {
				int d = dist(i, j, r0, c0);
				bucket.get(d).add(new int[]{i, j});
			}
		}
		int[][] ans = new int[R * C][];
		int index = 0;
		for (int i = 0; i <= maxDist; i++) {
			for (int[] it : bucket.get(i)) {
				ans[index++] = it;
			}
		}
		return ans;
	}
		
	public int dist(int i, int j, int r0, int c0) {
		return Math.abs(i - r0) + Math.abs(j - c0);
	}
}
////////////////////////////////////////////////////
