/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class TreeNode {
	int val;
	TreeNode left;
	TreeNode right;
	TreeNode() {}
	TreeNode(int val) {
		this.val = val;
	}
	TreeNode (int val, TreeNode left, TreeNode right) {
		this.val = val;
		this.left = left;
		this.right = right;
	}
}
//114. 二叉树展开为链表

// 将左子树插入到右子树的地方
// 将原来的右子树接到左子树的最右边节点
// 考虑新的右子树的根节点，一直重复上边的过程，直到新的右子树为 null

class Solution {
    public void flatten(TreeNode root) {
		while (root != null) {
			//左子树为 null，直接考虑下一个节点
			if (root.left == null) {
				root = root.right;
			} else {
				// 找左子树最右边的节点
				TreeNode pre = root.left;
				while (pre.right != null) {
					pre = pre.right;
				}
				//将原来的右子树接到左子树的最右边节点
				pre.right = root.right;
				// 将左子树插入到右子树的地方
				root.right = root.left;
				root.left = null;
				// 考虑新的右子树的根节点，一直重复上边的过程，直到新的右子树为 null
				root = root.right;
			}
		}
    }
}
