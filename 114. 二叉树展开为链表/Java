/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class TreeNode {
	int val;
	TreeNode left;
	TreeNode right;
	TreeNode() {}
	TreeNode(int val) {
		this.val = val;
	}
	TreeNode (int val, TreeNode left, TreeNode right) {
		this.val = val;
		this.left = left;
		this.right = right;
	}
}
//114. 二叉树展开为链表

// 将左子树插入到右子树的地方
// 将原来的右子树接到左子树的最右边节点
// 考虑新的右子树的根节点，一直重复上边的过程，直到新的右子树为 null

class Solution {
    public void flatten(TreeNode root) {
		while (root != null) {
			//左子树为 null，直接考虑下一个节点
			if (root.left == null) {
				root = root.right;
			} else {
				// 找左子树最右边的节点
				TreeNode pre = root.left;
				while (pre.right != null) {
					pre = pre.right;
				}
				//将原来的右子树接到左子树的最右边节点
				pre.right = root.right;
				// 将左子树插入到右子树的地方
				root.right = root.left;
				root.left = null;
				// 考虑新的右子树的根节点，一直重复上边的过程，直到新的右子树为 null
				root = root.right;
			}
		}
    }
}
////////////////////////////////////////////////////////////////////
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public void flatten(TreeNode root) {
		Stack<TreeNode> toVisit = new Stack<>();
		TreeNode cur = root;  // 添加根节点
		TreeNode pre = null;  // 递归添加右节点
		
		while (cur != null || !toVisit.isEmpty()) {
			while (cur != null) {
				toVisit.push(cur);
				cur = cur.right;
			}
			cur = toVisit.peek();  // 已经访问到最右的节点了
			// 在不存在左节点或者左节点已经访问过的情况下，访问根节点
			if (cur.left == null || cur.left == pre) {
				toVisit.pop();
				/**************修改的地方***************/
				cur.right = pre;
				cur.left = null;
				/**************修改的地方***************/
				pre = cur;
				cur = null;
			} else {
				cur = cur.left;  // 左节点还没有访问过就先访问左节点
			}
		}
    }
}
/////////////////////////////////////////////////////////////////////
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public void flatten(TreeNode root) {
		if (root == null) {
			return;
		}
		Stack<TreeNode> s = new Stack<>();
		s.push(root);
		TreeNode pre = null;
		while (!s.isEmpty()) {
			TreeNode temp = s.pop();
			/***********修改的地方*************/
			if (pre != null) {
				pre.right = temp;
				pre.left = null;;
			}
			/********************************/
			if (temp.right != null) {
				s.push(temp.right);
			}
			if (temp.left != null) {
				s.push(temp.left);
			}
			
			pre = temp;
		}
    }
}
