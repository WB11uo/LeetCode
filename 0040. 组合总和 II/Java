class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
		int len = candidates.length;
		List<List<Integer>> res = new ArrayList<>();
		if (len == 0) {
			return res;
		}
		
		Arrays.sort(candidates);
		
		Deque<Integer> path = new ArrayDeque<>(len);
		dfs(candidates, len, 0, target, path, res);
		return res;
    }
	
	private void dfs (int[] candidates, int len, int begin, int target, Deque<Integer> path, List<List<Integer>> res) {
		if (target == 0) {
			res.add(new ArrayList<>(path));
			return;
		}
		for (int i = begin; i < len; i++) {
			if (target - candidates[i] < 0) {
				break;
			}
			if (i > begin && candidates[i] == candidates[i - 1]) {
				continue;
			}
			path.addLast(candidates[i]);
			dfs(candidates, len, i + 1, target - candidates[i], path, res);
			path.removeLast();
		}
	}
}
//////////////////////////////////////////////////////////
class Solution {
    List<List<Integer>> ans = new ArrayList<>();

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        boolean[] hasVisited = new boolean[candidates.length];
        Arrays.sort(candidates);
        List<Integer> list = new ArrayList<>();
        backtracking(candidates, target, hasVisited, 0, list);
        return ans;
    }

    private void backtracking(int[] candidates, int target, boolean[] hasVisited, int start, List<Integer> list) {
        if (target == 0) {
            ans.add(new ArrayList<>(list));
            return;
        }
        for (int i = start; i < candidates.length; i++) {
            if (i != 0 && candidates[i] == candidates[i - 1] && !hasVisited[i - 1]) {
                continue;
            }
            if (candidates[i] <= target) {
                hasVisited[i] = true;
                list.add(candidates[i]);
                backtracking(candidates, target - candidates[i], hasVisited, i + 1, list);
                list.remove(list.size() - 1);
                hasVisited[i] = false;
            }
        }
    }
}
