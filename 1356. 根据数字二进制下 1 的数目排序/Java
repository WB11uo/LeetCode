class Solution {
    public int[] sortByBits(int[] arr) {
		int[] bit = new int[10001];
		List<Integer> list = new ArrayList<>();
		for (int x : arr) {
			list.add(x);
			bit[x] = get(x);
		}
		Collections.sort(list, new Comparator<Integer>() {
			public int compare (Integer x, Integer y) {
				if (bit[x] != bit[y]) {
					return bit[x] - bit[y];
				} else {
					return x - y;
				}
			}
		});
		for (int i = 0; i < arr.length; i++) {
			arr[i] = list.get(i);
		}
		return arr;
    }
	
	public int get (int x) {
		int res = 0;
		while (x != 0) {
			res += x % 2;
			x /= 2;
		}
		return res;
	}
}
//////////////////////////////////////////////////////////
class Solution {
    public int[] sortByBits(int[] arr) {
        List<Integer> list = new ArrayList<Integer>();
        for (int x : arr) {
            list.add(x);
        }
        int[] bit = new int[10001];
        bit[0] = 0;
        for (int i = 1; i <= 10000; ++i) {
            bit[i] = bit[i >> 1] + (i & 1);//bit[i] 为数字i二进制表示下数字 1 的个数
        }
        Collections.sort(list, new Comparator<Integer>() {
            public int compare(Integer x, Integer y) {
                if (bit[x] != bit[y]) {
                    return bit[x] - bit[y];
                } else {
                    return x - y;
                }
            }
        });
        for (int i = 0; i < arr.length; ++i) {
            arr[i] = list.get(i);
        }
        return arr;
    }
}
