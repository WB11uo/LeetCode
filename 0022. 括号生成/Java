class Solution {
    public List<String> generateParenthesis(int n) {
		List<String> combinations = new ArrayList<>();
		generateAll(new char[2 * n], 0, combinations);
		return combinations;
    }
	
	public void generateAll (char[] current, int pos, List<String> result) {
		if (pos == current.length) {
			if (valid(current)) {
				result.add(new String(current));
			}
		} else {
			current[pos] = '(';
			generateAll(current, pos + 1, result);
			current[pos] = ')';
			generateAll(current, pos + 1, result);
		}
	}
	
	public boolean valid(char[] current) {
		int balance = 0;
		for (char c : current) {
			if (c =='(') {
				++balance;
			} else {
				--balance;
			}
			if (balance < 0) {
				return false;
			}
		}
		return balance == 0;
	}
}
//////////////////////////////////////////////////////////////
class Solution {
	  // 做减法
    public List<String> generateParenthesis(int n) {
		List<String> res = new ArrayList<>();
	
		if (n == 0) {
			return res;
		}
		
		dfs("", n, n, res);
		return res;
    }
	
	    /**
     * @param curStr 当前递归得到的结果
     * @param left   左括号还有几个可以使用
     * @param right  右括号还有几个可以使用
     * @param res    结果集
     */
	 private void dfs (String curStr, int left, int right, List<String> res) {
		 if (left == 0 && right == 0) {
			 res.add(curStr);
			 return;
		 }
		 
		 // 剪枝，左括号可以使用的个数严格大于右括号可以使用的个数，才剪枝
		 if (left > right) {
			 return;
		 }
		 
		 if (left > 0) {
			 dfs (curStr + '(', left - 1, right, res);
		 }
		 
		 if (right > 0) {
			 dfs (curStr + ')', left, right - 1, res);
		 }
	 }
}
//////////////////////////////////////////////////////
class Solution {
	// 做加法
    public List<String> generateParenthesis(int n) {
		List<String> res = new ArrayList<>();
		if (n == 0) {
			return res;
		}
		dfs("", 0, 0, n, res);
		return res;
	}
	
	/**
     * @param curStr 当前递归得到的结果
     * @param left   左括号已经用了几个
     * @param right  右括号已经用了几个
     * @param n      左括号、右括号一共得用几个
     * @param res    结果集
     */
	public void dfs (String curStr, int left, int right, int n, List<String> res) {
		if (left == n && right == n) {
			res.add(curStr);
			return;
		}
		
		// 剪枝
		if (left < right) {
			return;
		}
		if (left < n) {
			dfs(curStr + '(', left + 1, right, n, res);
		}
		if (right < n) {
			dfs(curStr + ')', left, right + 1, n, res);
		}
	}
}
/////////////////////////////////////////////////////
class Solution {
	//仅仅是把 Queue 换成了 Stack ，广度优先遍历就改成了深度优先遍历
	class Node {
		private String res;
		private int left;
		private int right;
		
		public Node(String res, int left, int right) {
			this.res = res;
			this.left = left;
			this.right = right;
		}
	}
	
    public List<String> generateParenthesis(int n) {
		List<String> res = new ArrayList<>();
		if (n == 0) {
			return res;
		}
		Queue<Node> queue = new LinkedList<>();
		queue.offer(new Node("", n, n));
		while (!queue.isEmpty()) {
			Node curNode = queue.poll();
			if (curNode.left == 0 && curNode.right == 0) {
				res.add(curNode.res);
			}
			if (curNode.left > 0) {
				queue.offer(new Node(curNode.res + "(", curNode.left - 1, curNode.right));
			}
			if (curNode.right > 0 && curNode.left < curNode.right) {
				queue.offer(new Node(curNode.res + ")", curNode.left, curNode.right - 1));
			}
		}
		return res;
	}
}
