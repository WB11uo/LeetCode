class Solution {
    public int lengthOfLIS(int[] nums) {
		if (nums.length == 0) {
			return 0;
		}
		int[] dp = new int[nums.length];
		dp[0] = 1;
		int max = 1;
		for (int i = 1; i < nums.length; i++) {
			dp[i] = 1;
			for (int j = 0; j < i; j++) {
				if (nums[i] > nums[j]) {
					dp[i] = Math.max(dp[i], dp[j] + 1);
				}
			}
			max = Math.max(max, dp[i]);
		}
		return max;
    }
}
/////////////////////////////////////////////////
class Solution {
    public int lengthOfLIS(int[] nums) {
		int n = nums.length;
		int[] tails = new int[n];
		int len = 0;
		for (int num : nums) {
			int index = binarySearch(tails, len, num);
			tails[index] = num;
			if (index == len) {
				len++;
			}
		}
		return len;
    }
	
	private int binarySearch(int[] tails, int len, int num) {
		int l = 0, h = len;
		while (l < h) {
			int mid = l + (h - l) / 2;
			if(tails[mid] == num) {
				return mid;
			} else if (tails[mid] > num) {
				h = mid;
			} else {
				l = mid + 1;
			}
		}
		return l;
	}
}
