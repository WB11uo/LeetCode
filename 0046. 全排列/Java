class Solution {
    public List<List<Integer>> permute(int[] nums) {
		List<List<Integer>> res = new ArrayList<List<Integer>>();
		
		List<Integer> output = new ArrayList<>();
		for (int num : nums) {
			output.add(num);
		}
		
		int n = nums.length;
		backtrack(n, output, res, 0);
		return res;
    }
	
	public void backtrack(int n, List<Integer> output, List<List<Integer>> res, int first) {
		if (first == n) {
			res.add(new ArrayList<>(output));
		}
		for (int i = first; i < n; i++) {
			Collections.swap(output, first, i);
			backtrack(n, output, res, first + 1);
			Collections.swap(output, first, i);
		}
	}
}
//////////////////////////////////////////////////////
class Solution {
    public List<List<Integer>> permute(int[] nums) {
		int len = nums.length;
		List<List<Integer>> res = new ArrayList<>();
		
		if (len == 0) {
			return res;
		}
		
		boolean[] used = new boolean[len];
		List<Integer> path = new ArrayList<>();
		
		dfs(nums, len, 0, path, used, res);
		return res;
	}
	
	private void dfs(int[] nums, int len, int depth,
					List<Integer> path, boolean[] used,
					List<List<Integer>> res) {
		if (depth == len) {
			res.add(path);
			return;
		}
		
		for (int i = 0; i < len; i++) {
			if (!used[i]) {
				List<Integer> newPath = new ArrayList<>(path);
				newPath.add(nums[i]);
				
				boolean[] newUsed = new boolean[len];
				System.arraycopy(used, 0, newUsed, 0, len);
				newUsed[i] = true;
				
				dfs(nums, len, depth + 1, newPath, newUsed, res);
			}
		}
	}
}
//////////////////////////////////////////////////
class Solution {
    List<List<Integer>> ans = new ArrayList<>();

    public List<List<Integer>> permute(int[] nums) {
        List<Integer> list = new ArrayList<>();
        boolean[] hasVisited = new boolean[nums.length];

        backtracking(nums, list, hasVisited);

        return ans;
    }

    private void backtracking(int[] nums, List<Integer> list, boolean[] hasVisited) {
        if (list.size() == nums.length) {
            ans.add(new ArrayList<>(list));
            return;
        }

        for (int i = 0; i < hasVisited.length; i++) {
            if (hasVisited[i]) {
                continue;
            }
            hasVisited[i] = true;
            list.add(nums[i]);
            backtracking(nums, list, hasVisited);
            list.remove(list.size() - 1);
            hasVisited[i] = false;
        }
    }
}
