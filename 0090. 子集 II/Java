class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
		List<List<Integer>> ans = new ArrayList<>();
		Arrays.sort(nums);
		getAns(nums, 0, new ArrayList<>(), ans);
		return ans;
    }
	
	private void getAns(int[] nums, int start, ArrayList<Integer> temp, List<List<Integer>> ans) {
		ans.add(new ArrayList<>(temp));
		for (int i = start; i < nums.length; i++) {
			if (i > start && nums[i] == nums[i - 1]) {
				continue;
			};
			temp.add(nums[i]);
			getAns(nums, i + 1, temp, ans);
			temp.remove(temp.size() - 1);
		}
	}
}
///////////////////////////////////////////
class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
		List<List<Integer>> ans = new ArrayList<>();
		ans.add(new ArrayList<>());
		Arrays.sort(nums);
		int start = 1;
		for (int i = 0; i < nums.length; i++) {
			List<List<Integer>> ans_tmp = new ArrayList<>();
			for (int j = 0; j < ans.size(); j++) {
				List<Integer> list = ans.get(j);
				if (i > 0 && j < start && nums[i] == nums[i - 1]) {
					continue;
				}
				List<Integer> tmp = new ArrayList<>(list);
				tmp.add(nums[i]);
				ans_tmp.add(tmp);
			}
			
			start = ans.size();
			ans.addAll(ans_tmp);
		}
		return ans;
	}
}
////////////////////////////////////////////////////
class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
		List<List<Integer>> result = new ArrayList<>();
		List<Integer> empty = new ArrayList<>();
		result.add(empty);
		Arrays.sort(nums);
		
		for (int i = 0; i < nums.length; i++) {
			int dupCoun = 0;
			while (((i + 1) < nums.length) && nums[i] == nums[i + 1]) {
				dupCoun++;
				i++;
			}
			int prevNum = result.size();
			for (int j = 0; j < prevNum; j++) {
				List<Integer> element = new ArrayList<Integer>(result.get(j));
				for (int t = 0; t <= dupCoun; t++) {
					element.add(nums[i]);
					result.add(new ArrayList<>(element));
				}
			}
		}
		return result;
	}
}
////////////////////////////////////////////////////
class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
		Arrays.sort(nums);
		List<List<Integer>> lists = new ArrayList<>();
		int subsetNum = 1 << nums.length;
		for (int i =0; i < subsetNum; i++) {
			List<Integer> list = new ArrayList<>();
			boolean illegal = false;
			for (int j = 0; j < nums.length; j++) {
				//当前位是 1
				if ((i >> j & 1) == 1) {
					//当前是重复数字，并且前一位是 0，跳过这种情况
					if (j > 0 && nums[j] == nums[j - 1] && (i >> (j - 1) & 1) == 0) {
						illegal = true;
						break;
					} else {
						list.add(nums[j]);
					}
				}
			}
			if (!illegal) {
				lists.add(list);
			}
		}
		return lists;
	}
}
