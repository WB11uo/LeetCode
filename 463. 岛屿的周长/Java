class Solution {
    public int islandPerimeter(int[][] grid) {
        int[] dx = {0, 1, 0 ,-1};
        int[] dy = {1, 0, -1, 0};
        int ans = 0;
        int n = grid.length, m = grid[0].length;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                int cnt = 0;

                if (grid[i][j] == 1) {
                    for (int k = 0; k < 4; k++) {
                        int x = i + dx[k];
                        int y = j + dy[k];
                        if (x >= n || y >= m || x < 0 || y < 0 || grid[x][y] == 0) {
                            cnt++;
                        }
                    }
                    ans += cnt;                    
                }
                
            }
        }
        return ans;
    }
}
///////////////////////////////////////////////////////////
class Solution {
    int[] dx = {0, 1, 0 ,-1};
    int[] dy = {1, 0, -1, 0};
    public int islandPerimeter(int[][] grid) {
        int ans = 0;
        int n = grid.length, m = grid[0].length;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {

                if (grid[i][j] == 1) {
                    ans += dfs (grid, i, j, n, m);                 
                }
                
            }
        }
        return ans;
    }

    public int dfs (int[][] grid, int i, int j, int n, int m) {
        if (i >= n || j >= m || i < 0 || j < 0 || grid[i][j] == 0) {
            return 1;
        }
        if (grid[i][j] == 2) {
            return 0;
        }
        grid[i][j] = 2;
        int cnt = 0;
        for (int k = 0; k < 4; k++) {
            int tx = i + dx[k];
            int ty = j + dy[k];
            cnt += dfs (grid, tx, ty, n, m);         
        }
        return cnt;
    }
}
