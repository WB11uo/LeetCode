//splitTimes：已经分割出多少个 ip 段；
//begin：截取 ip 段的起始位置；
//path：记录从根结点到叶子结点的一个路径（回溯算法常规变量，是一个栈）；
//res：记录结果集的变量，常规变量
class Solution {
	
    public List<String> restoreIpAddresses(String s) {
		int len = s.length();
		List<String> res = new ArrayList<>();
		
		if (len < 4 || len > 12) {
			return res;
		}
		
		Deque<String> path = new ArrayDeque<>(4);
		int splitTimes = 0;
		
		dfs (s, len, splitTimes, 0, path, res);
		
		return res;
    }
	
	private int judgeIfIpSegment(String s, int left, int right) {
		int len = right - left + 1;
		
		if (len > 1 && s.charAt(left) == '0') {
			return -1;
		}
		
		int res = 0;
		for (int i = left; i <= right; i++) {
			res = res * 10 + s.charAt(i) - '0';
		}
		
		if (res > 255) {
			return -1;
		}
		return res;
	}
	
	private void dfs (String s, int len, int split, int begin, Deque<String> path, List<String> res) {
		if (begin == len) {
			if (split == 4) {
				res.add(String.join(".", path));
			}
			return;
		}
		
		if (len - begin < (4 - split) || (len - begin) > 3 * (4 - split)) {
			return;
		}
		
		for (int i = 0; i < 3; i++) {
			if (begin + i >= len) {
				break;
			}
			
			int ipSegment = judgeIfIpSegment(s, begin, begin + i);
			if (ipSegment != -1) {
				path.addLast(ipSegment + "");
				dfs (s, len, split + 1, begin + i + 1, path, res);
				path.removeLast();
			}
		}
	}
}
///////////////////////////////////////////////////////////
public class Solution {

    public List<String> restoreIpAddresses(String s) {
        int len = s.length();
        List<String> res = new ArrayList<>();
        if (len > 12 || len < 4) {
            return res;
        }

        Deque<String> path = new ArrayDeque<>(4);
        dfs(s, len, 0, 4, path, res);
        return res;
    }

    // 需要一个变量记录剩余多少段还没被分割

    private void dfs(String s, int len, int begin, int residue, Deque<String> path, List<String> res) {
        if (begin == len) {
            if (residue == 0) {
                res.add(String.join(".", path));
            }
            return;
        }

        for (int i = begin; i < begin + 3; i++) {
            if (i >= len) {
                break;
            }

            if (residue * 3 < len - i) {
                continue;
            }

            if (judgeIpSegment(s, begin, i)) {
                String currentIpSegment = s.substring(begin, i + 1);
                path.addLast(currentIpSegment);

                dfs(s, len, i + 1, residue - 1, path, res);
                path.removeLast();
            }
        }
    }

    private boolean judgeIpSegment(String s, int left, int right) {
        int len = right - left + 1;
        if (len > 1 && s.charAt(left) == '0') {
            return false;
        }

        int res = 0;
        while (left <= right) {
            res = res * 10 + s.charAt(left) - '0';
            left++;
        }

        return res >= 0 && res <= 255;
    }
}
//////////////////////////////////////////////////////////
class Solution {
    public List<String> restoreIpAddresses(String s) {
		List<String> addresses = new ArrayList<>();
		StringBuilder tempAddress = new StringBuilder();
		doRestore(0, tempAddress, addresses, s);
		return addresses;
    }
	
	private void doRestore(int k, StringBuilder tempAddress, List<String> addresses, String s) {
		if (k == 4 || s.length() == 0) {
			if (k == 4 && s.length() == 0) {
				addresses.add(tempAddress.toString());
			}
			return;
		}
		
		for (int i = 0; i < s.length() && i <= 2; i++) {
			if (i != 0 && s.charAt(0) == '0') {
				break;
			}
			
			String part = s.substring(0, i + 1);
			if (Integer.valueOf(part) <= 255) {
				if (tempAddress.length() != 0) {
					part = "." + part;
				}
				tempAddress.append(part);
				doRestore(k + 1, tempAddress, addresses, s.substring(i + 1));
				tempAddress.delete(tempAddress.length() - part.length(), tempAddress.length());
			}
		}
	}
}
