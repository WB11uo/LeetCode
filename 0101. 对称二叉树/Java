/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
        if (root == null) {
			return true;
		}
		return dfs (root.left, root.right);
	}
	
	public boolean dfs (TreeNode left, TreeNode right) {
		if (left == null && right == null) {
			return true;
		}  
		if (left == null || right ==null) {
			return false;
		}
		if (left.val != right.val) {
			return false;
		}
		return dfs(left.left, right.right) && dfs (left.right, right.left);
	}
}
///////////////////////////////////////////////////////////////
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
        return check(root, root);
	}
	
	public boolean check(TreeNode u, TreeNode v) {
		Queue<TreeNode> q = new LinkedList<>();
		q.offer(u);
		q.offer(v);
		while(!q.isEmpty()) {
			u = q.poll();
			v = q.poll();
			if (u == null && v == null) {
				continue;
			}
			if ((u == null || v == null) || (u.val != v.val)) {
				return false;
			}
			
			q.offer(u.left);
			q.offer(v.right);
			
			q.offer(u.right);
			q.offer(v.left);
		}
		return true;
	}
}
