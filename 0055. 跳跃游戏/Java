class Solution {
    public boolean canJump(int[] nums) {
		int reach = 0, n = nums.length;
		for (int i = 0; i < n; i++) {
			if (i > reach) {
				return false;
			}
			reach = Math.max(i + nums[i], reach);
		}
		return reach >= n - 1;
    }
}
//////////////////////////////////////////
class Solution {
    public boolean canJump(int[] nums) {
		int reach = 0, n = nums.length;
		for (int i = 0; i <= reach && reach < n - 1; i++) {
			reach = Math.max(i + nums[i], reach);
		}
		return reach >= n - 1;
    }
}
//////////////////////////////////////////
class Solution {
    public boolean canJump(int[] nums) {
		int reach = 0, last = nums.length - 1;
		for (int i = last - 1; i >= 0; i--) {
			if (nums[i] + i >= last) {
				last = i;
			}
		}
		return last == 0;
    }
}
