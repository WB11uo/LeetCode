class Solution {
	List<Integer> t = new ArrayList<>();
	List<List<Integer>> ans = new ArrayList<>();
    public List<List<Integer>> subsets(int[] nums) {
		int n = nums.length;
		for (int mask = 0; mask < (1 << n);  ++mask) {
			t.clear();
			for (int i = 0; i < n; i++) {
				if ((mask & (1 << i)) != 0) {
					t.add(nums[i]);
				}
			}
			ans.add(new ArrayList<Integer>(t));
		}		
		return ans;
    }
}
///////////////////////////////////////////
class Solution {
	List<Integer> t = new ArrayList<>();
	List<List<Integer>> ans = new ArrayList<>();
    
	public List<List<Integer>> subsets(int[] nums) {
		dfs(0, nums);
		return ans;
    }
	
	public void dfs (int cur, int[] nums) {
		if (cur == nums.length) {
			ans.add(new ArrayList<Integer>(t));
			return;
		}
		t.add(nums[cur]);
		dfs(cur + 1, nums);
		t.remove(t.size() - 1);
		dfs(cur + 1, nums);
	}
}
/////////////////////////////////////////////
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
		List<List<Integer>> res = new ArrayList<>();
		backtrack(0, nums, res, new ArrayList<Integer>());
		return res;
    }
	
	private void backtrack(int i, int[] nums, List<List<Integer>> res, ArrayList<Integer> tmp) {
		res.add(new ArrayList<>(tmp));
		for (int j = i; j < nums.length; j++) {
			tmp.add(nums[j]);
			backtrack(j + 1, nums, res, tmp);
			tmp.remove(tmp.size() - 1);
		}
	}
}
///////////////////////////////////////////////////////////////////
class Solution {
    List<List<Integer>> ans = new ArrayList<>();

    public List<List<Integer>> subsets(int[] nums) {
        List<Integer> list = new ArrayList<>();
        ans.add(new ArrayList<>());
        Arrays.sort(nums);
        backtracking(nums, 0, list);
        return ans;
    }

    private void backtracking (int[] nums, int start, List<Integer> list) {
        if (start == nums.length) {
            return;
        }
        for (int i = start; i < nums.length; i++) {
            list.add(nums[i]);
            ans.add(new ArrayList<>(list));
            backtracking(nums, i + 1, list);
            list.remove(list.size() - 1);
        }
    }
}
