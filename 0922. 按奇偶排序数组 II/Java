class Solution {
    public int[] sortArrayByParityII(int[] A) {
        int n = A.length;
        int[] ans = new int[n];

        int i = 0;
        for (int x : A) {
            if (x % 2 == 0) {
                ans[i] = x;
                i += 2;
            }
        }
        i = 1;
        for (int x : A) {
            if (x % 2 == 1) {
                ans[i] = x;
                i += 2;
            }
        }
        return ans;
    }
}
//////////////////////////////////////////////////////////////////
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public int[] sortArrayByParityII(int[] A) {
        int n = A.length;
		int j = 1;
		for (int i = 0; i < n; i += 2) {
			if (A[i] % 2 == 1) {
				while (A[j] % 2 == 1) {
					j += 2;
				}
				swap(A[i], A[j]);
			}
		}
		return A;
    }
	
	public void swap(int a, int b) {
		int temp = a;
		a = b;
		b = a;
	}
}
///////////////////////////////////////
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public int[] sortArrayByParityII(int[] A) {
        int n = A.length;
		int j = 1;
		for (int i = 0; i < n; i += 2) {
			if (A[i] % 2 == 1) {
				while (A[j] % 2 == 1) {
					j += 2;
				}
				swap(A, i, j);
			}
		}
		return A;
    }
	
    public void swap(int[] A, int i, int j) {
        int temp = A[i];
        A[i] = A[j];
        A[j] = temp;
    }
}
