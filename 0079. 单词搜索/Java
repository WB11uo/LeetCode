class Solution {
	
	private boolean[][] marked;
	
	private int m;
	private int n;
	
	private String word;
	private char[][] board;
	
	private int[][] direction = {{-1, 0}, {0, -1}, {0, 1}, {1, 0}};
	
    public boolean exist(char[][] board, String word) {
		
		m = board.length;
		n = board[0].length;
		if (m == 0) {
			return false;
		}
		marked = new boolean[m][n];
		
		this.word = word;
		this.board = board;
		
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (dfs(i, j, 0)) {
					return true;
				}
			}
		}
		return false;
    }
	
	private boolean dfs (int i, int j, int start) {
		if (start == word.length() - 1) {
			return board[i][j] == word.charAt(start);
		}
		if (board[i][j] == word.charAt(start)) {
			marked[i][j] = true;
			for(int k = 0; k < 4; k++) {
				int newX = i + direction[k][0];
				int newY = j + direction[k][1];
				if (inArea(newX, newY) && !marked[newX][newY]) {
					if (dfs (newX, newY, start + 1)) {
						return true;
					}
				} 
			}
			marked[i][j] = false;
		}
		return false;
	}
	
	private boolean inArea(int x, int y) {
		return x >= 0 && x < m && y >= 0 && y < n;
	}
}
///////////////////////////////////////////////////
class Solution {
    private final static int[][] direction = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
    private int m;
    private int n;

    public boolean exist(char[][] board, String word) {
        if (word == null || word.length() == 0) {
            return true;
        }
        if (board == null || board.length == 0 || board[0].length == 0) {
            return false;
        }

        m = board.length;
        n = board[0].length;
        boolean[][] hasVisited = new boolean[m][n];
		
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (backtracing(0, i, j, hasVisited, board, word)) {
					return true;
				}
			}
		}
		
        return false;
    }

    private boolean backtracing (int curLen, int i, int j, boolean[][] hasVisited, char[][] board, String word) {
        if (curLen == word.length()) {
            return true;
        }
		if (i < 0 || i >= m || j < 0 || j >= n || board[i][j] != word.charAt(curLen) || hasVisited[i][j]) {
			return false;
		}
		
		hasVisited[i][j] = true;
		
		for (int[] d : direction) {
			if (backtracing(curLen + 1, i + d[0], j + d[1], hasVisited, board, word)) {
				return true;
			}
		}
		
		hasVisited[i][j] = false;
		return false;
    }
}
