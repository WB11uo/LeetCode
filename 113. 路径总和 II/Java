/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> ans = new ArrayList<>();
        dfs(root, sum, new ArrayList<Integer>(), ans);
        return ans;
    }
    public void dfs(TreeNode node, int sum, List<Integer> tmp, List<List<Integer>> list) {
        if(node == null) return;
        tmp.add(node.val);
        if(node.val == sum && node.left == null && node.right == null) {
        //当前结点满足为满足要求的叶子结点
            list.add(new ArrayList<>(tmp));
             //注意这里要拷贝tmp的副本, 如果ans中存储的是tmp对象，会随着之后的dfs发生改变
        }else {
            //否则搜索该结点的左右子树
            dfs(node.left, sum - node.val, tmp, list);
            dfs(node.right, sum - node.val, tmp, list);
        }
        tmp.remove(tmp.size() - 1);//移除访问路径的当前结点
    }
}
