class Solution {
    public int minPathSum(int[][] grid) {
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[0].length; j++) {
				if (i == 0 && j == 0) {
					continue;
				} else if (i == 0) {
					grid[i][j] += grid[i][j - 1];
				} else if (j == 0) {
					grid[i][j] += grid[i - 1][j];
				} else {
					grid[i][j] += Math.min(grid[i][j - 1], grid[i - 1][j]);
				}
			}
		}
		return grid[grid.length - 1][grid[0].length - 1];
	}
}
//////////////////////////////////////////////////////
class Solution {
    public int minPathSum(int[][] grid) {
		if (grid.length == 0 || grid[0].length == 0) {
			return 0;
		}
		
		int m = grid.length, n = grid[0].length;
		int[] dp = new int[n];
		
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (j == 0) {
					dp[j] = 0;
				} else if (i == 0) {
					dp[j] = dp[j - 1];
				} else {
					dp[j] = Math.min(dp[j - 1], dp[j]);
				}
				dp[j] += grid[i][j];
			}
		}
		return dp[n - 1];
    }
}
