class Solution {
    public int[] topKFrequent(int[] nums, int k) {
		Map<Integer, Integer> map = new HashMap<>();
		for (int num : nums) {
			map.put(num, map.getOrDefault(num, 0) + 1);
		}
		
		List<Integer>[] buckets = new ArrayList[nums.length + 1];
		for (int key : map.keySet()) {
			int fr = map.get(key);
			if(buckets[fr] == null) {
				buckets[fr] = new ArrayList<>();
			}
			buckets[fr].add(key);
		}
		List<Integer> topK = new ArrayList<>();
		for (int i = buckets.length - 1; i >= 0 && topK.size() < k; i--) {
			if (buckets[i] == null) {
				continue;
			}
			if (buckets[i].size() <= (k - topK.size())) {
				topK.addAll(buckets[i]);
			} else {
				topK.addAll(buckets[i].subList(0, k - topK.size()));
			}
		}
		
		int[] res = new int[k];
		for (int i = 0; i < k; i++) {
			res[i] = topK.get(i);
		}
		return res;
    }
}
