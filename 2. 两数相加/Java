/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode pre = new ListNode(0);
        ListNode cur = pre;
        int c = 0;
        while (l1 != null || l2 != null) {
            int x = l1 == null ? 0 : l1.val;
            int y = l2 == null ? 0 : l2.val;
            int sum = x + y + c;
            c = sum / 10;
            sum %= 10;
            cur.next = new ListNode(sum);
            
            cur = cur.next;
            if (l1 != null) {
                l1 = l1.next;
            }
            if (l2 != null) {
                l2 = l2.next;
            }
        }
        if (c == 1) {
            cur.next = new ListNode(c);
        }
        return pre.next;
    }
}
/////////////////////////////////////////
class Solution {
    public int[] twoSum(int[] nums, int target) {
		int len = nums.length;
		Map<Integer, Integer> hashmap = new HashMap<>(len - 1);
		hashmap.put(nums[0], 0);
		for (int i = 1; i < len; i++) {
			int another = target - nums[i];
			if (hashmap.containsKey(another)) {
				return new int[]{i, hashmap.get(another)};
			}
			hashmap.put(nums[i], i);
		}
		return new int[]{0};
    }
}
