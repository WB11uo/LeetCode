class Solution {
    public void solve(char[][] board) {
        if (board == null || board.length == 0) return;
        int m = board.length;
        int n = board[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                // 从边缘o开始搜索
                boolean isEdge = i == 0 || j == 0 || i == m - 1 || j == n - 1;
                if (isEdge && board[i][j] == 'O') {
                    dfs(board, i, j);
                }
            }
        }

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 'O') {
                    board[i][j] = 'X';
                }
                if (board[i][j] == '#') {
                    board[i][j] = 'O';
                }
            }
        }
    }

    public void dfs(char[][] board, int i, int j) {
        if (i < 0 || j < 0 || i >= board.length  || j >= board[0].length || board[i][j] == 'X' || board[i][j] == '#') {
            // board[i][j] == '#' 说明已经搜索过了. 
            return;
        }
        board[i][j] = '#';
        dfs(board, i - 1, j); // 上
        dfs(board, i + 1, j); // 下
        dfs(board, i, j - 1); // 左
        dfs(board, i, j + 1); // 右
    }
}
////////////////////////////////////////////////////
class Solution {
	int[] dx = {1, -1, 0, 0};
	int[] dy = {0, 0, 1, -1};
	
    public void solve(char[][] board) {
		int n = board.length;
		if (n == 0) {
			return;
		}
		int m = board[0].length;
		Queue<int[]> queue = new LinkedList<>();
		for (int i = 0; i < n; i++) {
			if (board[i][0] == 'O') {
				queue.offer(new int[]{i, 0});
			}
			if (board[i][m - 1] == 'O') {
				queue.offer(new int[]{i, m - 1});
			}
		}
		for (int i = 0; i < m; i++) {
			if (board[0][i] == 'O') {
				queue.offer(new int[]{0, i});
			}
			if (board[n - 1][i] == 'O') {
				queue.offer(new int[]{n - 1, i});
			}
		}
		while (!queue.isEmpty()) {
			int[] cell = queue.poll();
			int x = cell[0], y = cell[1];
			board[x][y] = 'A';
			for (int i = 0; i < 4; i++) {
				int mx = x + dx[i], my = y + dy[i];
				if (mx < 0 || mx >= n || my < 0 || my >= m || board[mx][my] != 'O') {
					continue;
				}
				queue.offer(new int[]{mx, my});
			}
		}
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (board[i][j] == 'A') {
					board[i][j] = 'O';
				} else if (board[i][j] == 'O') {
					board[i][j] = 'X';
				}
			}
		}
    }
}
