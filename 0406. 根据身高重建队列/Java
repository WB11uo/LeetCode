class Solution {
    public int[][] reconstructQueue(int[][] people) {
		Arrays.sort(people, new Comparator<int[]>() {
			public int compare(int[] person1, int[] person2) {
				if (person1[0] != person2[0]){
					return person1[0] - person2[0];
				} else {
					return person2[1] - person1[1];
				}
			}
		});
		int n = people.length;
		int[][] ans = new int[n][];
		for (int[] person : people) {
			int space = person[1] + 1;
			for (int i = 0; i < n; i++) {
				if (ans[i] == null) {
					space--;
					if (space == 0) {
						ans[i] = person;
						break;
					}
				}
			}
		}	
		return ans;
    }
}
//////////////////////////////////////////////////////
class Solution {
    public int[][] reconstructQueue(int[][] people) {
		Arrays.sort(people, new Comparator<int[]>() {
			public int compare (int[] person1, int[] person2) {
				if (person1[0] != person2[0]) 
					return person2[0] - person1[0];
				else 
					return person1[1] - person2[1];
			}
		});
		List<int[]> ans = new LinkedList<>();
		for (int[] person : people) {
			ans.add(person[1], person);
		}
		return ans.toArray(new int[ans.size()][]);
    }
}
////////////////////////////////////////////////////////
class Solution {
    public int[][] reconstructQueue(int[][] people) {
		if (people == null || people.length == 0 || people[0].length == 0) {
			return new int[0][0];
		}
		Arrays.sort(people, (a, b) -> (a[0] == b[0] ? a[1] - b[1] : b[0] - a[0]));
		List<int[]> queue = new ArrayList<>();
		for (int[] p : people) {
			queue.add(p[1], p);
		}
		return queue.toArray(new int[queue.size()][]);
    }
}
