class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        backtrack(0, nums, res, new ArrayList<Integer>());
        return res;

    }

    private void backtrack(int i, int[] nums, List<List<Integer>> res, ArrayList<Integer> tmp) {
        res.add(new ArrayList<>(tmp));
        for (int j = i; j < nums.length; j++) {
            tmp.add(nums[j]);
            backtrack(j + 1, nums, res, tmp);
            tmp.remove(tmp.size() - 1);
        }
    }
}
///////////////////////////////////////////
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
		ans.add(new ArrayList<Integer>());
		
		for (int num : nums) {
			List<List<Integer>> newSubsets = new ArrayList<>();
			for (List<Integer> subset : ans) {
				List<Integer> newSubset = new ArrayList<Integer>(subset);
				newSubset.add(num);
				newSubsets.add(newSubset);
			}
			ans.addAll(newSubsets);
		}
		
		return ans;
    }
}
/////////////////////////////////////////////
class Solution {
	List<List<Integer>> result = new ArrayList<>();
	int n;
	
    public List<List<Integer>> subsets(int[] nums) {
        n = nums.length;
		for (int i = 0; i <= n; i++) {
			backtrack(0, i, new ArrayList<Integer>(), nums);
		}
		return result;
    }
	
	public void backtrack(int start, int k, ArrayList<Integer> cur, int[] nums) {
		if (k == 0) {
			result.add(new ArrayList<Integer>(cur));
			return;
		}
		for (int i = start; i < n; i++) {
			cur.add(nums[i]);
			backtrack(i + 1, k -1, cur, nums);
			cur.remove(cur.size() - 1);
		}
	}
}
///////////////////////////////////////////////////////
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
		int n = nums.length;
		
		for (int i = (int)Math.pow(2, n); i < (int)Math.pow(2, n+1); i++) {
			String bitMask = Integer.toBinaryString(i).substring(1);
			
			List<Integer> cur = new ArrayList<>();
			for (int j = 0; j < n; j++) {
				if(bitMask.charAt(j) == '1')
					cur.add(nums[j]);
			}
			result.add(cur);
		}
		return result;
	}
}
