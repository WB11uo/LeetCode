class Solution {
    List<List<Integer>> ans = new ArrayList<>();

    public List<List<Integer>> combinationSum3(int k, int n) {
        List<Integer> list = new ArrayList<>();
        backtracking(k, n, list, 1);
        return ans;        
    }

    private void backtracking (int k, int n, List<Integer> list, int start) {
        if (k == 0 && n == 0) {
            ans.add(new ArrayList<>(list));
            return;
        }
        // if (k == 0 || n == 0) {
        //     return;
        // }
        for (int i = start; i <= 9; i++) {
            list.add(i);
            backtracking(k - 1, n - i, list, i + 1);
            list.remove(list.size() - 1);
        }
    }
}
