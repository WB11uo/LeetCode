class Solution {
    public List<String> letterCombinations(String digits) {
		List<String> combinations = new ArrayList<String>();
		if (digits.length() == 0) {
			return combinations;
		}
		Map<Character, String> phoneMap = new HashMap<>() {{
			put('2', "abc");
			put('3', "def");
			put('4', "ghi");
			put('5', "jkl");
			put('6', "mno");
			put('7', "pqrs");
			put('8', "tuv");
			put('9', "wxyz");
		}};
		backtrack(combinations, phoneMap, digits, 0, new StringBuffer());
		return combinations;
    }
	
	public void backtrack(List<String> combinations, Map<Character, String> phoneMap, String digits, int index, StringBuffer combination) {
		if (index == digits.length()) {
			combinations.add(combination.toString());
		} else {
			char digit = digits.charAt(index);
			String letters = phoneMap.get(digit);
			int lettersCount = letters.length();
			for (int i = 0; i < lettersCount; i++) {
				combination.append(letters.charAt(i));
				backtrack(combinations, phoneMap, digits, index+1, combination);
				combination.deleteCharAt(index);
			}
		}
	}
}
/////////////////////////////////////////////////////////////////////////
class Solution {
	private String letterMap[] = {
		" ",    //0
		"",     //1
		"abc",  //2
		"def",  //3
		"ghi",  //4
		"jkl",  //5
		"mno",  //6
		"pqrs", //7
		"tuv",  //8
		"wxyz"  //9
	};
	
	private ArrayList<String> res;
	
    public List<String> letterCombinations(String digits) {
		res = new ArrayList<String>();
		if (digits.equals("")) {
			return res;
		}
		findCombination(digits, 0, "");
		return res;
	}
	
	private void findCombination(String digits, int index, String s) {
		if (index == digits.length()) {
			res.add(s);
			return;
		}
		Character c = digits.charAt(index);
		String letters = letterMap[c - '0'];
		for (int i = 0; i < letters.length(); i++) {
			findCombination(digits, index + 1, s + letters.charAt(i));
		}
		return;
	}
}
//////////////////////////////////////////
class Solution {
	private static final String[] KEYS = {"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
    public List<String> letterCombinations(String digits) {
		List<String> res = new ArrayList<>();
		if (digits == null || digits.length() == 0) {
			return res;
		}
		doCombination(new StringBuilder(), res, digits);
		return res;
    }
	
	private void doCombination(StringBuilder sb, List<String> res, String digits) {

		if (sb.length() == digits.length()) {
			res.add(sb.toString());
			return;
		}
		
		int curDigit = digits.charAt(sb.length()) - '0';
		
		for (char c : KEYS[curDigit].toCharArray()) {
			sb.append(c);
			doCombination(sb, res, digits);
			sb.deleteCharAt(sb.length() - 1);
		}
	}
}
