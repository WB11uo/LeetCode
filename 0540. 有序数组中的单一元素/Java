class Solution {
    public int singleNonDuplicate(int[] nums) {
        int lo = 0;
		int hi = nums.length - 1;
		while (lo < hi) {
			int mid = lo + (hi - lo) / 2;
			boolean halvesAreEven = (hi - mid) % 2 == 0;
			if (nums[mid + 1] == nums[mid]) {
				if (halvesAreEven) {
					lo = mid + 2;
				} else {
					hi = mid - 1;
				}
			} else if (nums[mid - 1] == nums[mid]) {
				if (halvesAreEven) {
					hi = mid - 2;
				} else {
					lo = mid + 1;
				}
			} else {
				return nums[mid];
			}
		}
		return nums[lo];
    }
}
/////////////////////////////////////////
class Solution {
    public int singleNonDuplicate(int[] nums) {
        int l = 0, h = nums.length - 1;
		while (l < h) {
			int m = l + (h - l) / 2;
			if (m % 2 == 1) {
				m--;
			}
			if (nums[m] == nums[m + 1]) {
				l = m + 2;
			} else {
				h = m;
			}
		}
		return nums[l];
    }
}
