class Solution {
    public int findUnsortedSubarray(int[] nums) {
		int l = nums.length, r = 0;
		for (int i = 0; i < nums.length - 1; i++) {
			for (int j = i + 1; j < nums.length; j++) {
				if (nums[j] < nums[i]) {
					r = Math.max(r, j);
					l = Math.min(l, i);
				}
			}
		}
		return r - l < 0 ? 0 : r - l + 1;
    }
}
/////////////////////////////////
class Solution {
    public int findUnsortedSubarray(int[] nums) {
		int min = Integer.MAX_VALUE, max= Integer.MIN_VALUE;
		boolean flag = false;
		for (int i = 1; i < nums.length; i++) {
			if (nums[i] < nums[ i - 1]) {
				flag = true;
			}
			if (flag) {
				min = Math.min(min, nums[i]);
			}
		}
		flag = false;
		for (int i = nums.length - 2; i >= 0; i--) {
			if (nums[i] > nums[i + 1]) {
				flag = true;
			}
			if (flag) {
				max = Math.max(max, nums[i]);
			}
		}
		int l, r;
		for (l = 0; l < nums.length; l++) {
			if (min < nums[l]) {
				break;
			}
		}
		for (r  = nums.length - 1; r >= 0; r--) {
			if (max > nums[r]) {
				break;
			}
		}
		return r - l < 0 ? 0 : r - l + 1;
    }
}
