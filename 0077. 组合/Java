class Solution {
    public List<List<Integer>> combine(int n, int k) {
		List<List<Integer>> res = new ArrayList<>();
		if (k <= 0 || n < k) {
			return res;
		}
		Deque<Integer> path = new ArrayDeque<>();
		dfs(n,k,1,path,res);
		return res;
    }
	
	private void dfs(int n, int k, int begin, Deque<Integer> path, List<List<Integer>> res) {
		if (path.size() == k) {
			res.add(new ArrayList<>(path));
			return;
		}
		
		for (int i = begin; i <= n; i++) {
			path.addLast(i);
			dfs(n, k, i + 1, path, res);
			path.removeLast();
		}
	}
}
/////////////////////////////////////////////////////
class Solution {
    public List<List<Integer>> combine(int n, int k) {
		List<List<Integer>> res = new ArrayList<>();
		if (k <= 0 || n < k) {
			return res;
		}
		Deque<Integer> path = new ArrayDeque<>();
		dfs(n,k,1,path,res);
		return res;
    }
	
	private void dfs(int n, int k, int begin, Deque<Integer> path, List<List<Integer>> res) {
		if (path.size() == k) {
			res.add(new ArrayList<>(path));
			return;
		}
		
		for (int i = begin; i <= n - (k - path.size()) + 1; i++) {
			path.addLast(i);
			dfs(n, k, i + 1, path, res);
			path.removeLast();
		}
	}
}
////////////////////////////////////////////////////////////
class Solution {
    public List<List<Integer>> combine(int n, int k) {
		List<List<Integer>> res = new ArrayList<>();
		if (k <= 0 || k > n) {
			return res;
		}
		Deque<Integer> path = new ArrayDeque<>();
		dfs(1, n, k, path, res);
		return res;
	}
	
	private void dfs(int begin, int n, int k, Deque<Integer> path, List<List<Integer>> res) {
		if (k == 0) {
			res.add(new ArrayList<>(path));
			return;
		}
		
		if (begin > n - k + 1) {
			return;
		}
		dfs(begin + 1, n, k, path, res);
		path.addLast(begin);
		dfs(begin + 1, n, k - 1, path, res);
		path.removeLast();
	}
}
//////////////////////////////////////////////////////////
class Solution {
    List<List<Integer>> ans = new ArrayList<>();

    public List<List<Integer>> combine(int n, int k) {
        List<Integer> list = new ArrayList<>();
        backtracking(n, k, list, 1);
        return ans;
    }

    private void backtracking(int n, int k, List<Integer> list, int start) {
        if (0 == k) {
            ans.add(new ArrayList<>(list));
            return;
        }

        for (int i = start; i <= n - k + 1; i++) {
            list.add(i);
            backtracking(n, k - 1, list, i + 1);
            list.remove(list.size() - 1);
        }
    }
}
