class Solution {
    public int[] countBits(int num) {
        int[] ret = new int[num + 1];
        for (int i = 1; i <= num; i++) {
            ret[i] = ret[i & (i - 1)] + 1;
        }
        return ret;
    }
}
///////////////////////////////
class Solution {
    public int[] countBits(int num) {
        int[] bits = new int[num + 1];
        for (int i = 0; i <= num; i++) {
            bits[i] = countOnes(i);
        }
        return bits;
    }

    private int countOnes(int x) {
        int ones = 0;
        while (x > 0) {
            x &= ( x - 1);
            ones++;
        }
        return ones;
    }
}
////////////////////////////////////////
class Solution {
    public int[] countBits(int num) {
        int[] bits = new int[num + 1];
        int hightBit = 0;
        for (int i = 1; i <= num; i++) {
            if ((i & (i -1)) == 0) {
                hightBit = i;
            }
            bits[i] = bits[i - hightBit] + 1;
        }
        return bits;
    }
}
///////////////////////////////
class Solution {
    public int[] countBits(int num) {
        int[] bits = new int[num + 1];
        for (int i = 1; i <= num; i++) {
            bits[i] = bits[i >> 1] + (i & 1);
        }
        return bits;
    }
}
//////////////////////////////
class Solution {
    public int[] countBits(int num) {
        int[] bits = new int[num + 1];
        for (int i = 1; i <= num; i++) {
            bits[i] = bits[i & (i - 1)] + 1;
        }
        return bits;
    }
}
